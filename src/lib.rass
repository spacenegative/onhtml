#![allow(non_snake_case)]
use duplicate::duplicate
use std::io::prelude::*
use std::time::
	SystemTime,
	UNIX_EPOCH,
;

//ENUMS
pub enum TEXTAREAWRAP
	Hard, Soft,
pub enum TYPE
	Button, Checkbox, Color , Date, DatetimeLocal, Email, File, Hidden, Image, Month, Number,  Password, Radio, Range, Reset, Search, Submit, Tel, Text, Time, Url, Week,
pub enum PRELOAD
	Auto, Metadata, None,
pub enum ENCTYPE
	Application, Multipart, Text,
pub enum METHOD
	Get, Post, Patch,
pub enum TARGET
	Blank, Self_, Parent, Top,
pub enum FORMREL
	External, Help, License, Next, Nofollow, Noopener, Noreferrer, Opener, Prev, Search,
pub enum AREL
	Alternate ,Author ,Bookmark ,External ,Help ,License ,Next ,Nofollow ,Noreferrer ,Noopener  ,Prev ,Search ,Tag ,
pub enum REFPOLICY
	NoReferrer ,NoReferrerWhenDowngrade ,Origin ,OriginWhenCrossOrigin ,UnsafeUrl ,
pub enum LISTTYPE
	N ,A ,Aa ,I ,Ii ,
pub enum MARQUEEBEHAVIOR
	Scroll, Slide, Alternate,
pub enum MARQUEEDIRECTION
	Left, Right, Up, Down,

struct Tag
	pub name: String ,
	pub atts: Vec<(String,String)> ,
	pub val: String ,
impl Tag
	fn new( name:String , val:String )->Tag
		---> Tag
			name ,
			atts:  vec![] ,
			val ,
	fn att( &mut self , name:String , val:String ) -> &mut Self
		self.atts.push( ( name , val ) )
		---> self

pub struct Html
	pub version: VERSION,
	pub title: String,
	pub desc: String,
	pub keywords: Vec<String>,
	pub content: String,
	pub theme: String,
	pub scale: u32,
	pub css: Vec<String>,
	pub js: Vec<JAVASCRIPT>,
	pub favicon: String,
	pub ogimage: (String,String),

pub enum JAVASCRIPT
	Module(String),
	Script(String),

#[derive(Debug ,Clone)] pub enum VERSION
	Auto ,Number(String) ,

impl Html

	pub fn new(x:&str) ->Html
		---> Html
			version: VERSION::Number("0"`),
			title: ""`,
			desc: ""`,
			keywords: vec!(),
			content: x`,
			theme: "#111111"`,
			scale: 3,
			css: vec!(),
			js: vec!(),
			favicon: ""`,
			ogimage: (""`,""`),

	fn versioning( &mut self ) -> &mut Html
		//[1]
		let ver:String
		match &self.version
			VERSION::Auto =>
				let t = SystemTime::now().duration_since( UNIX_EPOCH )    .expect( "ERR: Time is before Unix Epoch" ).as_millis()
				ver = !!( "?v={}" ,t)
			VERSION::Number(n) =>
				ver = !!( "?v={}" ,n)
		for link in &mut self.css
			link.push_str( &ver )
		for script in &mut self.js
			match script
				JAVASCRIPT::Module(s) =>
					JAVASCRIPT::Module(!!("{}{}" ,s ,&ver))
				JAVASCRIPT::Script(s) =>
					JAVASCRIPT::Script(!!("{}{}" ,s ,&ver))
		self.favicon.push_str( &ver )
		---> self

	pub fn print( &mut self ) -> String
		let html = self.versioning()
		let mut x = !!( "<title>{}</title>\n" , html.title )
		x.push_str( "<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>\n" )
		x.push_str( &!!( "<meta name='description' content='{}'>\n" , html.desc ) )
		if html.ogimage.0 != ""`
			x.push_str( &!!( "<meta property='og:image' content='{}'>\n" , html.ogimage.0 ) )
			x.push_str( &!!( "<meta property='og:image:alt' content='{}'>\n" , html.ogimage.1 ) )
		if html.keywords.len() > 0
			let mut kws = ""`
			for k in &html.keywords
				kws += &!!( "{}, " , k )
			let kws = kws[..kws.len()-2]`
			x.push_str( &!!( "<meta name='keywords' content='{}'>\n" , kws ) )
		x.push_str( &!!( "<meta name='viewport' content='width=device-width, initial-scale=1,   maximum-scale={}'>\n" , html.scale ) )
		x.push_str( &!!( "<meta name='theme-color' content='{}'>\n" , html.theme ) )
		for i in &html.css
			x.push_str( &!!( "<link rel='stylesheet' href='{}' />\n" , i ) )
		x.push_str( &!!( "<link rel='shortcut icon' href='{}' />\n" , &html.favicon ) )
		x = !!( "<!DOCTYPE html>\n<html>\n{}\n<body>\n{}\n</body>\n" , x , html.content )
		for i in &html.js
			match i
				JAVASCRIPT::Script(s) =>
					x.push_str(&!!("<script src='{}'></script>\n" ,s))
				JAVASCRIPT::Module(s) =>
					x.push_str(&!!("<script type='module'      src='{}'></script>\n" ,s))
		x.push_str( "</html>" )
		---> x

	pub fn write( &mut self , file:&str )
		let p = std::path::Path::new( file )
		let mut f = std::fs::File::create( &p )  .expect( !!( "ERR: COULD NOT CREATE FILE {}" , file ).as_str() )
		let h = self.print()
		f.write_all( h.as_bytes())  .expect( !!("ERR: COULD NOT WRITE TO {}",p.display()).as_str() )
//[1]If version is Auto,the css/js version will be generated on every reload.I want this when developing.

//T
#[duplicate(T; [MARQUEE]; [Q]; [MAINN]; [NAV]; [FOOTER]; [HEADER]; [B]; [LABEL]; [DATALIST]; [CODE]; [ARTICLE]; [ASIDE]; [SECTION]; [P]; [OL]; [UL]; [LI]; [OPTION]; [PRE]; [CANVAS]; [BLOCKQUOTE]; [SOURCE]; [SPAN]; [A]; [FORM]; [TEMPLATE]; [VIDEO]; [TEXTAREA]; [SELECT]; [H1]; [H2]; [H3]; [H4]; [H5]; [H6]; [BUTTON]; [DIV]; [IMG]; [INPUT] )]
pub struct T( Tag ) ;
#[duplicate(f name T ; [marquee]["marquee"][MARQUEE]; [q]["q"][Q]; [nav]["nav"][NAV]; [footer]["footer"][FOOTER]; [header]["header"][HEADER]; [b]["b"][B]; [label]["label"][LABEL]; [datalist]["datalist"][DATALIST]; [code]["code"][CODE]; [article]["article"][ARTICLE]; [aside]["aside"][ASIDE]; [section]["section"][SECTION]; [p]["p"][P]; [ol]["ol"][OL]; [ul]["ul"][UL]; [li]["li"][LI]; [option]["option"][OPTION]; [pre]["pre"][PRE]; [canvas]["canvas"][CANVAS]; [blockquote]["blockquote"][BLOCKQUOTE]; [source]["source"][SOURCE]; [span]["span"][SPAN]; [a]["a"][A]; [form]["form"][FORM]; [template]["template"][TEMPLATE]; [video]["video"][VIDEO]; [textarea]["textarea"][TEXTAREA]; [select]["select"][SELECT]; [h1]["h1"][H1]; [h2]["h2"][H2]; [h3]["h3"][H3]; [h4]["h4"][H4]; [h5]["h5"][H5]; [h6]["h6"][H6]; [button]["button"][BUTTON]; [div]["div"][DIV]; [img]["img"][IMG]; [input]["input"][INPUT] )]
pub fn f(val:&str) ->T
	let t = Tag::new( name` , val` )
	---> T( t )
pub    fn mainn(val:&str) -> MAINN
	let t = Tag::new("main"` ,val`)
	---> MAINN(t)
#[duplicate(T; [MARQUEE]; [Q]; [MAINN]; [NAV]; [FOOTER]; [HEADER]; [B]; [LABEL]; [DATALIST]; [CODE]; [ARTICLE]; [ASIDE]; [SECTION]; [P]; [OL]; [UL]; [LI]; [OPTION]; [PRE]; [CANVAS]; [BLOCKQUOTE]; [SOURCE]; [SPAN]; [A]; [FORM]; [TEMPLATE]; [VIDEO]; [TEXTAREA]; [SELECT]; [H1]; [H2]; [H3]; [H4]; [H5]; [H6]; [BUTTON]; [DIV]; [IMG]; [INPUT] )]
impl T
	pub fn id( &mut self , val:&str ) -> &mut Self
		self.0.att( "id"` , val` )
		---> self
	pub fn class( &mut self , val:&str ) -> &mut Self
		self.0.att( "class"` , val` )
		---> self
	pub fn onclick( &mut self , val:&str ) -> &mut Self
		self.0.att( "onclick"` , val` )
		---> self
	pub fn onload( &mut self , val:&str ) -> &mut Self
		self.0.att( "onload"` , val` )
		---> self
	pub fn data( &mut self , key:&str , val:&str ) -> &mut Self
		self.0.att( !!( "data-{}",key )` , val` )
		---> self
	pub fn contenteditable( &mut self ) -> &mut Self
		self.0.att( "contenteditable"` , "true"` )
		---> self
	pub fn tabindex( &mut self ,n:i32 ) -> &mut Self
		self.0.att( "tabindex"` , !!("{}" ,n) )
		---> self
	pub fn autocorrect( &mut self ,b:bool) -> &mut Self
		if b
			self.0.att( "autocorrect"` , "on"` )
		else
			self.0.att( "autocorrect"` , "off"` )
		---> self
	pub fn autocapitalize( &mut self ,b:bool) -> &mut Self
		if b
			self.0.att( "autocapitalize"` , "on"` )
		else
			self.0.att( "autocapitalize"` , "off"` )
		---> self
	pub fn spellcheck( &mut self ,b:bool) -> &mut Self
		if b
			self.0.att( "spellcheck"` , "true"` )
		else
			self.0.att( "spellcheck"` , "false"` )
		---> self
	pub fn noAutos( &mut self ) -> &mut Self
		self  .autocorrect(false)  .autocapitalize(false)  .spellcheck(false)
		---> self
	pub fn n( &mut self ) -> String
		let mut x = !!( "\n<{} " , self.0.name )
		for att in &self.0.atts
			if att.1 == ""
				x += &!!( "{} " , &att.0 )
			else
				x += &!!( "{}='{}' " , &att.0 , &att.1 )
		let val = !!( "\n{}\n" , &self.0.val )
		let val = unlines( val.lines().map( tab ).collect() )
		x += &!!( ">{}</{}>" , &val , &self.0.name )
		---> !!( "{}" , x )

impl MARQUEE
	pub fn behavior(&mut self ,x:MARQUEEBEHAVIOR) -> &mut Self
		match x
			MARQUEEBEHAVIOR::Scroll =>
				self.0.att("bahavior"` ,"scroll"`)
				---> self
			MARQUEEBEHAVIOR::Slide =>
				self.0.att("bahavior"` ,"slide"`)
				---> self
			MARQUEEBEHAVIOR::Alternate =>
				self.0.att("bahavior"` ,"alternate"`)
				---> self
	pub fn direction(&mut self ,x:MARQUEEDIRECTION) -> &mut Self
		match x
			MARQUEEDIRECTION::Left =>
				self.0.att("direction"` ,"left"`)
				---> self
			MARQUEEDIRECTION::Right =>
				self.0.att("direction"` ,"right"`)
				---> self
			MARQUEEDIRECTION::Up =>
				self.0.att("direction"` ,"up"`)
				---> self
			MARQUEEDIRECTION::Down =>
				self.0.att("direction"` ,"down"`)
				---> self
	pub fn loop_(&mut self ,x:u32) -> &mut Self
		self.0.att("loop"` ,!!("{}" ,&x))
		---> self
	pub fn scrollamount(&mut self ,x:u32) -> &mut Self
		//  bigger = faster
		self.0.att("scrollamount"` ,!!("{}" ,&x))
		---> self
	pub fn hspace(&mut self ,x:&str) -> &mut Self
		//  bigger = faster
		self.0.att("hspace"` ,x`)
		---> self

impl LI
	pub fn value( &mut self ,n:u32) -> &mut Self
		self.0.att( "value"` , !!("{}" ,n))
		---> self

impl BLOCKQUOTE
	pub fn cite(&mut self ,x:&str) -> &mut Self
		self.0.att( "cite"` , !!("{}" ,x))
		---> self
//cite accepts a url

impl LABEL
	pub fn for_( &mut self ,x:&str) -> &mut Self
		self.0.att( "for"` , !!("{}" ,x))
		---> self
//Only for <ol> lists.Specifies the start value of a list item.The following list items will increment from that number

impl PRE
	pub fn oninput( &mut self ,f:&str) -> &mut Self
		self.0.att( "oninput"` , !!("{}" ,f))
		---> self
	pub fn onchange( &mut self ,f:&str) -> &mut Self
		self.0.att( "onchange"` , !!("{}" ,f))
		---> self
	pub fn wrap( &mut self ) -> &mut Self
		self.0.att( "wrap"` , ""`)
		---> self

impl OL
	pub fn reversed( &mut self ) -> &mut Self
		self.0.att( "reversed"` , ""` )
		---> self
	pub fn start( &mut self ,n:u32) -> &mut Self
		// Specifies the start value of an ordered list
		self.0.att( "start"` , !!("{}" ,n) )
		---> self
	pub fn type_( &mut self ,t:LISTTYPE) -> &mut Self
		match t
			LISTTYPE::N =>
				self.0.att( "type"` ,"1"` )
				---> self
			LISTTYPE::A =>
				self.0.att( "type"` ,"A"` )
				---> self
			LISTTYPE::Aa =>
				self.0.att( "type"` ,"a"` )
				---> self
			LISTTYPE::I =>
				self.0.att( "type"` ,"I"` )
				---> self
			LISTTYPE::Ii =>
				self.0.att( "type"` ,"i"` )
				---> self

impl A
	pub fn download( &mut self ) -> &mut Self
		self.0.att( "download"` , ""` )
		---> self
	pub fn href( &mut self , url:&str ) -> &mut Self
		self.0.att( "href"` , url` )
		---> self
	pub fn type_( &mut self , x:&str ) -> &mut Self
		self.0.att( "type"` , x` )
		---> self
	pub fn hreflang( &mut self , two_digit_code:&str ) -> &mut Self
		self.0.att( "hreflang"` , two_digit_code` )
		---> self
	pub fn ping( &mut self , urls:&str ) -> &mut Self
		// space separated urls
		self.0.att( "hreflang"` , urls` )
		---> self
	pub fn target( &mut self , x:TARGET ) -> &mut Self
		match x
			TARGET::Blank =>
				self.0.att( "target"` , "blank"` )
				---> self
			TARGET::Parent =>
				self.0.att( "target"` , "parent"` )
				---> self
			TARGET::Self_ =>
				self.0.att( "target"` , "self"` )
				---> self
			TARGET::Top =>
				self.0.att( "target"` , "top"` )
				---> self
	pub fn rel( &mut self , x:AREL ) -> &mut Self
		match x
			AREL::Alternate =>
				self.0.att( "rel"` , "alternate"` )
				---> self
			AREL::Author =>
				self.0.att( "rel"` , "author"` )
				---> self
			AREL::Bookmark =>
				self.0.att( "rel"` , "bookmark"` )
				---> self
			AREL::External =>
				self.0.att( "rel"` , "external"` )
				---> self
			AREL::Help =>
				self.0.att( "rel"` , "help"` )
				---> self
			AREL::License =>
				self.0.att( "rel"` , "license"` )
				---> self
			AREL::Next =>
				self.0.att( "rel"` , "next"` )
				---> self
			AREL::Nofollow =>
				self.0.att( "rel"` , "nofollow"` )
				---> self
			AREL::Noreferrer =>
				self.0.att( "rel"` , "noreferrer"` )
				---> self
			AREL::Noopener =>
				self.0.att( "rel"` , "noopener"` )
				---> self
			AREL::Prev =>
				self.0.att( "rel"` , "prev"` )
				---> self
			AREL::Search =>
				self.0.att( "rel"` , "search"` )
				---> self
			AREL::Tag =>
				self.0.att( "rel"` , "tag"` )
				---> self
	pub fn novalidate( &mut self ) -> &mut Self
		self.0.att( "novalidate"` , ""` )
		---> self
	pub fn name( &mut self , x:&str ) -> &mut Self
		self.0.att( "name"` , x` )
		---> self
	pub fn action( &mut self , url:&str ) -> &mut Self
		self.0.att( "action"` , url` )
		---> self
	pub fn p( &mut self , x:METHOD ) -> &mut Self
		match x
			METHOD::Get =>
				self.0.att( "method"` , "get"` )
				---> self
			METHOD::Post =>
				self.0.att( "method"` , "post"` )
				---> self
			METHOD::Patch =>
				self.0.att( "method"` , "patch"` )
				---> self
	pub fn enctype( &mut self , x:ENCTYPE ) -> &mut Self
		match x
			ENCTYPE::Application =>
				self.0.att( "enctype"` , "application/x-www-form-urlencoded"` )
				---> self
			ENCTYPE::Multipart =>
				self.0.att( "enctype"` , "multipart/form-data"` )
				---> self
			ENCTYPE::Text =>
				self.0.att( "enctype"` , "text/plain"` )
				---> self
	pub fn autocomplete( &mut self , on:bool ) -> &mut Self
		if on
			self.0.att( "autocomplete"` , "on"` )
		else
			self.0.att( "autocomplete"` , "off"` )
		---> self

impl FORM
	pub fn target( &mut self , x:TARGET ) -> &mut Self
		match x
			TARGET::Blank =>
				self.0.att( "rel"` , "_blank"` )
				---> self
			TARGET::Self_ =>
				self.0.att( "rel"` , "_self"` )
				---> self
			TARGET::Parent =>
				self.0.att( "rel"` , "_parent"` )
				---> self
			TARGET::Top =>
				self.0.att( "rel"` , "_top"` )
				---> self
	pub fn rel( &mut self , x:FORMREL ) -> &mut Self
		match x
			FORMREL::External =>
				self.0.att( "rel"` , "external"` )
				---> self
			FORMREL::Help =>
				self.0.att( "rel"` , "help"` )
				---> self
			FORMREL::License =>
				self.0.att( "rel"` , "license"` )
				---> self
			FORMREL::Next =>
				self.0.att( "rel"` , "next"` )
				---> self
			FORMREL::Nofollow =>
				self.0.att( "rel"` , "nofollow"` )
				---> self
			FORMREL::Noopener =>
				self.0.att( "rel"` , "noopener"` )
				---> self
			FORMREL::Noreferrer =>
				self.0.att( "rel"` , "noreferrer"` )
				---> self
			FORMREL::Opener =>
				self.0.att( "rel"` , "opener"` )
				---> self
			FORMREL::Prev =>
				self.0.att( "rel"` , "prev"` )
				---> self
			FORMREL::Search =>
				self.0.att( "rel"` , "search"` )
				---> self
	pub fn novalidate( &mut self ) -> &mut Self
		self.0.att( "novalidate"` , ""` )
		---> self
	pub fn name( &mut self , x:&str ) -> &mut Self
		self.0.att( "name"` , x` )
		---> self
	pub fn onsubmit( &mut self ,f:&str ) -> &mut Self
		self.0.att( "onsubmit"` , f` )
		---> self
	pub fn action( &mut self , url:&str ) -> &mut Self
		self.0.att( "action"` , url` )
		---> self
	pub fn method( &mut self , x:METHOD ) -> &mut Self
		match x
			METHOD::Get =>
				self.0.att( "method"` , "get"` )
				---> self
			METHOD::Post =>
				self.0.att( "method"` , "post"` )
				---> self
			METHOD::Patch =>
				self.0.att( "method"` , "patch"` )
				---> self
	pub fn enctype( &mut self , x:ENCTYPE ) -> &mut Self
		match x
			ENCTYPE::Application =>
				self.0.att( "enctype"` , "application/x-www-form-urlencoded"` )
				---> self
			ENCTYPE::Multipart =>
				self.0.att( "enctype"` , "multipart/form-data"` )
				---> self
			ENCTYPE::Text =>
				self.0.att( "enctype"` , "text/plain"` )
				---> self
	pub fn autocomplete( &mut self , on:bool ) -> &mut Self
		if on
			self.0.att( "autocomplete"` , "on"` )
		else
			self.0.att( "autocomplete"` , "off"` )
		---> self

impl IMG
	pub fn src( &mut self , val:&str ) -> &mut Self
		self.0.att( "src"` , val` )
		---> self

impl SOURCE
	pub fn src( &mut self , val:&str ) -> &mut Self
		self.0.att( "src"` , val` )
		---> self

impl VIDEO
	pub fn preload( &mut self , x:PRELOAD) -> &mut Self
		match x
			PRELOAD::Auto =>
				self.0.att( "preload"` , "auto"` )
				---> self
			PRELOAD::Metadata =>
				self.0.att( "preload"` , "metadata"` )
				---> self
			PRELOAD::None =>
				self.0.att( "preload"` , "none"` )
				---> self
	pub fn autoplay( &mut self ) -> &mut Self
		self.0.att( "autoplay"` , ""` )
		---> self
	pub fn controls( &mut self ) -> &mut Self
		self.0.att( "controls"` , ""` )
		---> self
	pub fn loop_( &mut self ) -> &mut Self
		self.0.att( "loop"` , ""` )
		---> self
	pub fn muted( &mut self ) -> &mut Self
		self.0.att( "muted"` , ""` )
		---> self
	pub fn poster( &mut self ,url:&str ) -> &mut Self
		self.0.att( "poster"` , url` )
		---> self
	pub fn src( &mut self ,url:&str ) -> &mut Self
		self.0.att( "src"` , url` )
		---> self
	pub fn width( &mut self , x:i32 ) -> &mut Self
		self.0.att( "width"` , x` )
		---> self
	pub fn height( &mut self , x:i32 ) -> &mut Self
		self.0.att( "height"` , x` )
		---> self

impl SELECT
	pub fn autofocus( &mut self ) -> &mut Self
		self.0.att( "autofocus"` , ""` )
		---> self
	pub fn disabled( &mut self ) -> &mut Self
		self.0.att( "disabled"` , ""` )
		---> self
	pub fn required( &mut self ) -> &mut Self
		self.0.att( "required"` , ""` )
		---> self
	pub fn name( &mut self , x:&str ) -> &mut Self
		self.0.att( "name"` , x` )
		---> self
	pub fn size( &mut self , x:i32 ) -> &mut Self
		self.0.att( "size"` , !!( "{}",x ) )
		---> self
	pub fn onchange( &mut self ,f:&str ) -> &mut Self
		self.0.att( "onchange"` , f` )
		---> self

impl OPTION
	pub fn disabled( &mut self ) -> &mut Self
		self.0.att( "disabled"` , ""` )
		---> self
	pub fn selected( &mut self ) -> &mut Self
		self.0.att( "selected"` , ""` )
		---> self
	pub fn hidden( &mut self ) -> &mut Self
		self.0.att( "hidden"` , ""` )
		---> self
	pub fn value( &mut self , x:&str ) -> &mut Self
		self.0.att( "value"` , x` )
		---> self

impl BUTTON
	pub fn formaction( &mut self , val:&str ) -> &mut Self
		self.0.att( "formaction"` , !!("{}" , val` ) )
		---> self
	pub fn autofocus( &mut self ) -> &mut Self
		self.0.att( "autofocus"` , ""` )
		---> self
	pub fn disabled( &mut self ) -> &mut Self
		self.0.att( "disabled"` , ""` )
		---> self
	pub fn name( &mut self , x:&str ) -> &mut Self
		self.0.att( "name"` , x` )
		---> self
	pub fn value( &mut self , x:&str ) -> &mut Self
		self.0.att( "value"` , x` )
		---> self

impl INPUT
	pub fn multiple(&mut self) -> &mut Self
		self.0.att( "multiple"` ,""` )
		---> self
	pub fn minlenght( &mut self , val:i32 ) -> &mut Self
		self.0.att( "minlenght"` , !!("{}" , val` ) )
		---> self
	pub fn value( &mut self , val:&str ) -> &mut Self
		self.0.att( "value"` , !!("{}" , val` ) )
		---> self
	pub fn formaction( &mut self , val:&str ) -> &mut Self
		self.0.att( "formaction"` , !!("{}" , val` ) )
		---> self
	pub fn title( &mut self , val:&str ) -> &mut Self
		self.0.att( "title"` , !!("{}" , val` ) )
		---> self
	pub fn size( &mut self , val:i32 ) -> &mut Self
		self.0.att( "size"` , !!("{}" , val` ) )
		---> self
	pub fn max( &mut self , val:&str ) -> &mut Self
		self.0.att( "max"` , val` )
		---> self
	pub fn list( &mut self , id:&str ) -> &mut Self
		// id of the datalist tag (input autocompletion)
		self.0.att( "list"` , id` )
		---> self
	pub fn name( &mut self , val:&str ) -> &mut Self
		self.0.att( "name"` , val` )
		---> self
	pub fn placeholder( &mut self , val:&str ) -> &mut Self
		self.0.att( "placeholder"` , val` )
		---> self
	pub fn readonly( &mut self ) -> &mut Self
		self.0.att( "readonly"` , ""` )
		---> self
	pub fn min( &mut self , val:&str ) -> &mut Self
		self.0.att( "min"` , val` )
		---> self
	pub fn checked( &mut self ) -> &mut Self
		self.0.att( "checked"` , ""` )
		---> self
	pub fn autofocus( &mut self ) -> &mut Self
		self.0.att( "autofocus"` , ""` )
		---> self
	pub fn disabled( &mut self ) -> &mut Self
		self.0.att( "disabled"` , ""` )
		---> self
	pub fn autocomplete( &mut self , val:bool ) -> &mut Self
		if val
			self.0.att( "autocomplete"` , "on"` )
		else
			self.0.att( "autocomplete"` , "off"` )
		---> self
	pub fn alt( &mut self , val:&str ) -> &mut Self
		let mut b = false
		for a in &self.0.atts
			if a.0 == "type" && a.1 == "image"
				b = true
		self.0.att( "accept"` , val` )
		if !b
			panic!( "\n\nTHE 'alt' ATT IS ONLY VALID FOR ATT: type='image'\n\n" )
		---> self
	pub fn accept( &mut self , val:&str ) -> &mut Self
		let mut b = false
		for a in &self.0.atts
			if a.0 == "type" && a.1 == "text" || a.0 == "type" && a.1 == "file"
				b = true
		self.0.att( "accept"` , val` )
		if !b
			panic!("\n\nTHE 'accept' ATT IS ONLY VALID FOR ATT: type='text||file'\n\n")
		---> self
	pub fn type_( &mut self , val:TYPE) -> &mut Self
		match val
			TYPE::Button =>
				self.0.att( "type"` , "button"` )
				---> self
			TYPE::Checkbox =>
				self.0.att( "type"` , "checkbox"` )
				---> self
			TYPE::Color =>
				self.0.att( "type"` , "color"` )
				---> self
			TYPE::Date =>
				self.0.att( "type"` , "date"` )
				---> self
			TYPE::DatetimeLocal =>
				self.0.att( "type"` , "datetimeLocal"` )
				---> self
			TYPE::Email =>
				self.0.att( "type"` , "email"` )
				---> self
			TYPE::File =>
				self.0.att( "type"` , "file"` )
				---> self
			TYPE::Hidden =>
				self.0.att( "type"` , "hidden"` )
				---> self
			TYPE::Image =>
				self.0.att( "type"` , "image"` )
				---> self
			TYPE::Month =>
				self.0.att( "type"` , "month"` )
				---> self
			TYPE::Number =>
				self.0.att( "type"` , "number"` )
				---> self
			TYPE::Password =>
				self.0.att( "type"` , "password"` )
				---> self
			TYPE::Radio =>
				self.0.att( "type"` , "radio"` )
				---> self
			TYPE::Range =>
				self.0.att( "type"` , "range"` )
				---> self
			TYPE::Reset =>
				self.0.att( "type"` , "reset"` )
				---> self
			TYPE::Search =>
				self.0.att( "type"` , "search"` )
				---> self
			TYPE::Submit =>
				self.0.att( "type"` , "submit"` )
				---> self
			TYPE::Tel =>
				self.0.att( "type"` , "tel"` )
				---> self
			TYPE::Text =>
				self.0.att( "type"` , "text"` )
				---> self
			TYPE::Time =>
				self.0.att( "type"` , "time"` )
				---> self
			TYPE::Url =>
				self.0.att( "type"` , "url"` )
				---> self
			TYPE::Week =>
				self.0.att( "type"` , "week"` )
				---> self
	pub fn onchange( &mut self ,f:&str ) -> &mut Self
		self.0.att( "onchange"` , f` )
		---> self
	pub fn oninput( &mut self ,f:&str ) -> &mut Self
		self.0.att( "onchange"` , f` )
		---> self
	pub fn oninvalid( &mut self ,f:&str ) -> &mut Self
		self.0.att( "oninvalid"` , f` )
		---> self
	pub fn required(&mut self) -> &mut Self
		self.0.att( "required"` , ""` )
		---> self
	// FICTIONAL ATTRIBUTES
	pub fn required_with(&mut self ,validation_message:&str) -> &mut Self
		self.0.att( "required"` , ""` )
		if validation_message != ""
			self.0.att("oninvalid"`    ,!!("this.setCustomValidity(\"{}\")" ,validation_message))
			self.0.att("oninput"`    ,"this.setCustomValidity(\"\")"`)
		---> self

impl TEXTAREA
	pub fn autofocus( &mut self ) -> &mut Self
		self.0.att( "autofocus"` , ""` )
		---> self
	pub fn disabled( &mut self ) -> &mut Self
		self.0.att( "disabled"` , ""` )
		---> self
	pub fn readonly( &mut self ) -> &mut Self
		self.0.att( "readonly"` , ""` )
		---> self
	pub fn required( &mut self ) -> &mut Self
		self.0.att( "required"` , ""` )
		---> self
	pub fn cols( &mut self , x:i32 ) -> &mut Self
		self.0.att( "cols"` , !!( "{}",x )` )
		---> self
	pub fn rows( &mut self , x:i32 ) -> &mut Self
		self.0.att( "rows"` , !!( "{}",x )` )
		---> self
	pub fn maxlength( &mut self , x:i32 ) -> &mut Self
		self.0.att( "maxlength"` , !!( "{}",x )` )
		---> self
	pub fn name( &mut self , x:&str ) -> &mut Self
		self.0.att( "name"` , x` )
		---> self
	pub fn placeholder( &mut self , x:&str ) -> &mut Self
		self.0.att( "placeholder"` , x` )
		---> self
	pub fn onchange( &mut self ,f:&str ) -> &mut Self
		self.0.att( "onchange"` , f` )
		---> self
	pub fn oninput( &mut self , f:&str ) -> &mut Self
		self.0.att( "oninput"` , f` )
		---> self

//HELPERS
fn tab( x:&str ) -> String
	//let mut y = "\t"`
	let mut y = ""`
	y.push_str( x )
	---> y
fn unlines( ls:Vec<String> ) -> String
	let mut x = ""`
	for l in ls
		x.push_str( &l )
		x.push_str( "\n" )
	---> x[..x.len()-1]`

//READY CONTRUCTS

// PAGED
pub fn paged( pages:Vec<String> ) -> String
	let mut pagernav = input( "" ) .class( "term" ) .n()
	pagernav += &form( &pagernav ).class( "hidden" ).n()
	let pager = div( "" ).class( "pager" ).n()
	pagernav += &pager
	pagernav += &div( &pagernav ).class( "nav" ).n()
	for page in pages
		pagernav += &div( &page ).class( "page" ).n()
	let paged = div( &pagernav ).class( "paged" ).id( "PAGED" ).n()
	---> paged

// CALENDAR
// needed by js function: calendar
pub fn calendar(id:&str) -> String
	let mut y = ""`
	let mut x = ""`
	x += &div("&lt;") .class("CALENDAR_PREV") .n()
	y += &x
	x = span("month") .class("CALENDAR_MONTH") .n()
	x += &span("@") .class("CALENDAR_YEAR") .n()
	x = div(&x) .n()
	y += &x
	y += &div("&gt;") .class("CALENDAR_NEXT") .n()
	y = div(&y) .class("calendar_header") .n()
	//
	x = div("Δε") .class("calendar_day_header") .n()
	x += &div("Τρ") .class("calendar_day_header") .n()
	x += &div("Τε") .class("calendar_day_header") .n()
	x += &div("Πε") .class("calendar_day_header") .n()
	x += &div("Πα") .class("calendar_day_header") .n()
	x += &div("Σα") .class("calendar_day_header") .n()
	x += &div("Κυ") .class("calendar_day_header") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x += &div("00") .class("calendar_day") .data("date","") .n()
	x = div(&x) .class("calendar_grid") .n()
	y += &x
	x = div("") .class("CALENDAR_PRINT_TODAY") .n()
	x += &div("") .class("CALENDAR_PRINT_SELECTED") .n()
	x = div(&x) .class("CALENDAR_PRINT") .n()
	y += &x
	y = div(&y) .id(id) .data("date" ,"") .data("selected" ,"") .n()
	---> y

//REFERENCE
//https://www.w3schools.com/TAGS/default.ASP

